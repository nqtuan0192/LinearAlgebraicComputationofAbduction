package diagnosis.algorithms.hittingsetalg;


/**
 * This class is used by the HS tree algorithm for linking objects.
 * DiagnosisWrappers should be generated by specifying a object, e.g.,
 * a DiagnosisComponent. During building the HS tree using the algorithm
 * implemented by DiagnosisGraph, the index is set. Note, that the index
 * must be unique for each object.
 *
 * @version 1.0, Date 15.03.2000
 * @author Franz Wotawa
 * @see modis.DiagnosisGraph
 * @see modis.DiagnosisSystem
 * @see modis.CollectionGraphSystem
 *
 */
public class DiagnosisCompWrapper extends Object {
    protected Object component;
    protected int index;

    /** 
     * Creates a new DiagnosisCompWrapper for the specified object
     * @param comp the object
     * @return a new instance of DiagnosisCompWrapper
     */
    public DiagnosisCompWrapper (Object comp) {
	super();
	component = comp;
	index = -1;
    }

    /** 
     * Creates a new DiagnosisCompWrapper for the specified object
     * and index.
     * @param comp the object
     * @param i the index of the object
     * @return a new instance of DiagnosisCompWrapper
     */
    DiagnosisCompWrapper (Object comp, int i) {
	super();
	component = comp;
	index = i;
    }

    /**
     * Answers the object stored in self.
     * @return an object or diagnosis component
     */
    public Object component () {
	return component;
    }

    /**
     * Answers the index of the stored object or component.
     * @return the index
     */
    public int getIndex () {
	return index;
    }

    /**
     * This method is for setting the index of the stored object or component
     * @param i the index
     */
    public void setIndex (int i) {
	if (i >= 0) {
	    index = i;
	}
    }

    /**
     * This method checks whether an index has been specified or not.
     * A negative value indicates that no index is available.
     * @return true if an index has been specified or false, otherwise.
     */
    public boolean hasIndex () {
	return index >= 0;
    }

    /**
     * This method returns the string representation of the wrapper.
     * @return the string representation
     */
    public String toString() {
	return component.toString();
    }
}

